# 1 워크플로의 이름 지정
name: CI and Deploy to Amazon EC2
# 2 워크플로가 시작될 조건 지정
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: mejai-github-action-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: mejai-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: mejai-codedeploy-deployment-group
permissions:
  contents: read
on:
  push:
    branches: [ master ]
jobs:
  build:
    runs-on: ubuntu-latest # 3 실행 환경 지정
    #4 실행스텝지정
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      # application-prod.yml 생성
      - name: Make application.properties
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.PRODUCTION_SECRET }}" > ./application-prod.yml
      - name: Make test.properties
        run: |
          cd ./src/test/resources
          touch ./application.yml
          echo "${{ secrets.TEST_SECRET }}" > ./application.yml
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: EditorConfig Format
        run: ./gradlew editorconfigFormat
      - name: Build with Gradle
        run: ./gradlew clean build
      # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      # (5) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .
        # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip


# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
